# Generated by Django 5.0.7 on 2025-03-28 20:06

import authentification.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and spaces only.', max_length=150, unique=True, validators=[authentification.models.validate_username], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('user_type', models.CharField(choices=[('professional', 'Professional'), ('parent', 'Parent'), ('other', 'Other')], default='other', max_length=12, verbose_name='user type')),
                ('accepte_conditions', models.BooleanField(default=False, help_text='Designates whether the user has accepted the terms and conditions.', verbose_name='terms accepted')),
                ('reset_token', models.UUIDField(blank=True, default=None, editable=False, null=True)),
                ('reset_token_expiry', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('security_question', models.CharField(default='Quel était votre ancien mot de passe ?', help_text='Question de sécurité personnalisée', max_length=255)),
                ('security_answer', models.CharField(blank=True, help_text='Réponse à la question de sécurité (hashé)', max_length=255)),
                ('bio', models.BinaryField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
        ),
    ]
